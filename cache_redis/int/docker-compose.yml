version: "3"
services:
  agent-cluster:
    image: acapy-cache-redis
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: >
      start -it http 0.0.0.0 3000 
        -ot http 
        -e http://agent-cluster:3000
        --admin 0.0.0.0 3001 --admin-insecure-mode 
        --no-ledger
        --plugin acapy_cache_redis.v0_1
        --plugin-config-value redis_cache.connection="redis://default:test1234@172.28.0.103:6382"
        --log-level debug
        --auto-provision
        --wallet-name default
        --wallet-type askar-anoncreds
        --wallet-key "insecure"
    networks:
      - acapy_default
    depends_on:
      redis-cluster:
        condition: service_completed_successfully
      redis-node-3:
        condition: service_healthy
    healthcheck:
      test: curl -s -o /dev/null -w '%{http_code}' "http://localhost:3001/status/live" | grep "200" > /dev/null
      start_period: 30s
      interval: 7s
      timeout: 5s
      retries: 5


  redis-cluster:
    image: redis:latest
    container_name: cluster
    command: >
      redis-cli --cluster create
        172.28.0.101:6380 172.28.0.102:6381 172.28.0.103:6382
        172.28.0.104:6383 172.28.0.105:6384 172.28.0.106:6385
      --cluster-replicas 1 --cluster-yes
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    networks:
      acapy_default:
        ipv4_address: 172.28.0.107
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6

  redis-node-1:
    image: redis:latest
    container_name: node1
    command: [ "redis-server", "/conf/redis.conf", "--port 6380" ]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    ports:
      - 6380:6380
    volumes:
      - ../redis_cluster.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.101

  redis-node-2:
    image: redis:latest
    container_name: node2
    command: [ "redis-server", "/conf/redis.conf", "--port 6381" ]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    ports:
      - 6381:6381
    volumes:
      - ../redis_cluster.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.102

  redis-node-3:
    image: redis:latest
    container_name: node3
    command: [ "redis-server", "/conf/redis.conf", "--port 6382" ]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    ports:
      - 6382:6382
    volumes:
      - ../redis_cluster.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.103
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p 6382 -a ${REDIS_PASSWORD} ping | grep PONG"]
      start_period: 15s
      interval: 1s
      timeout: 3s
      retries: 5

  redis-node-4:
    image: redis:latest
    container_name: node4
    command: [ "redis-server", "/conf/redis.conf", "--port 6383" ]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    ports:
      - 6383:6383
    volumes:
      - ../redis_cluster.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.104

  redis-node-5:
    image: redis:latest
    container_name: node5
    command: [ "redis-server", "/conf/redis.conf", "--port 6384" ]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    ports:
      - 6384:6384
    volumes:
      - ../redis_cluster.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.105

  redis-node-6:
    image: redis:latest
    container_name: node6
    command: [ "redis-server", "/conf/redis.conf", "--port 6385" ]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    ports:
      - 6385:6385
    volumes:
      - ../redis_cluster.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.106

  echo-cluster:
    image: dbluhm/echo-agent:6c22a88
    ports:
      - "3002:3002"
    command: --host 0.0.0.0 --port 3002 --log-level debug
    networks:
      - acapy_default
    healthcheck:
      test: nc -z 0.0.0.0 3002
      interval: 1s
      timeout: 3s
      retries: 5

  tests-cluster:
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      - AGENT_ENDPOINT=http://agent-cluster:3000
      - ADMIN_ENDPOINT=http://agent-cluster:3001
      - ECHO_ENDPOINT=http://echo-cluster:3002
    depends_on:
      agent-cluster:
        condition: service_healthy
      echo-cluster:
        condition: service_healthy
      redis-node-3:
        condition: service_healthy
    networks:
      - acapy_default
    command: tests/cluster

  agent-host:
    image: acapy-cache-redis
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    depends_on:
      redis-host:
        condition: service_healthy
    # volumes:
    #   - ./acapy-endpoint.sh:/acapy-endpoint.sh:ro,z
    #   - ./acapy_cache_redis:/home/indy/acapy_cache_redis:ro,z
    #   - ./docker/default.yml:/home/indy/default.yml:ro,z
    command: >
      start -it http 0.0.0.0 3003 
        -ot http 
        -e http://agent-host:3003
        --admin 0.0.0.0 3004 --admin-insecure-mode 
        --no-ledger
        --plugin acapy_cache_redis.v0_1
        --plugin-config-value redis_cache.connection="redis://redis-host:6379/0"
        --log-level debug
        --auto-provision
        --wallet-name default
        --wallet-type askar-anoncreds
        --wallet-key "insecure"
    healthcheck:
      test: curl -s -o /dev/null -w '%{http_code}' "http://localhost:3004/status/live" | grep "200" > /dev/null
      start_period: 30s
      interval: 7s
      timeout: 5s
      retries: 5

  redis-host:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    # volumes:
    #   - ./redis-data:/var/lib/redis
    #   - ./redis.conf:/etc/redis/redis.conf:ro,z
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 15s
      interval: 1s
      timeout: 3s
      retries: 5

  echo-host:
    image: dbluhm/echo-agent:6c22a88
    ports:
      - "3005:3005"
    command: --host 0.0.0.0 --port 3005 --log-level debug
    healthcheck:
      test: nc -z 0.0.0.0 3005
      interval: 1s
      timeout: 3s
      retries: 5

  tests-host:
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      - AGENT_ENDPOINT=http://agent-host:3003
      - ADMIN_ENDPOINT=http://agent-host:3004
      - ECHO_ENDPOINT=http://echo-host:3005
    depends_on:
      agent-host:
        condition: service_healthy
      echo-host:
        condition: service_healthy
      redis-host:
        condition: service_healthy
    command: tests/host

networks:
  acapy_default:
    external: true
    name: ${NETWORK_NAME}
